图例和注释
【这里的内容是解释说明的内容】
<方法名 参数A="值A" 参数B="值B">【这是语法的结构】


[变量引用]
在参数【某某="[xx]xxx"】里只要用成对的方括号【[]】把文本括起来，就指向一个已经声明过的变量
这个引用允许你嵌套使用【[xxx[xx]xxx]】它会先解释里面一层的，一层层剥出来
你可以利用这个技巧去声明一个数组，下面是数组的制作方法
范例：
<设置变量 名字="数组标签" 内容="1">
<设置变量 名字="数组1" 内容="这是数组1的值">
<设置变量 名字="数组2" 内容="这是数组2的值">
<设置变量 名字="数组[数组标签]" 内容="用这个值：[数组[数组标签]]  覆盖了数组2的值">

(+-/*)
四则混合运算，可以和变量引用并用，在参数【某某="(4+3)*3+[变量]*3"】中可以使用
范例：
<设置变量 名字="数组标签" 内容="1+3">


<如果>
A=0
条件=等于【等于、不等于，支持文本和数值】【小于、大于、小于等于、大于等于、不小于、不大于，只支持数值比较】
B=[变量]
【不能单独使用，必须要和“否则”、“结束”语句一起使用，<如果>下面的是条件为真的时候会执行的语句】
【允许使用嵌套】
<否则>
【不能单独使用，必须要和“如果”、“结束”语句一起使用，<否则>下面的是条件为假的时候会执行的语句】
【允许使用嵌套】
<结束>
【不能单独使用，必须要和“如果”、“否则”语句一起使用，<结束>表明该条件分支结束】
范例：
<如果 A="0" 条件="等于" B="0">
<如果 A="0" 条件="大于" B="0">
【在这里写你的语句】
<否则>【虽然你可能不需要用到，但这个标签是必须的】
<结束>【同理，结束必须要有才能保证正确退出】
<否则>
<如果 A="0" 条件="小于" B="0">
<否则>
<结束>
<结束>


<循环>
次数=2【循环里会执行两次】
【不能单独使用，必须要和“跳出”一起使用】
【允许使用嵌套】
<跳出>【这个表示该次循环结束，判断是否回到循环开始的地方】
【不能单独使用，必须要和“循环”一起使用】
范例：
<循环 次数="2">
【在这里写你的语句】
【两次的循环，这里一共执行两次】
<循环 次数="2">
【在这里写你的语句】
【两次*两次的循环，这里一共执行四次】
<跳出>
<跳出>


<文件读取>
名字=变量【读取一个ini文件的值并存入名为“变量”的变量中去，用%变量%可以获得相应的值】
路径=D:\\001.ini【声明ini文件的路径】
键名=键；【声明所要读取的ini文件的节点】
值名=值；【声明所要读取的ini文件的节点下面的key值的名字】
内容=默认；【当该ini文件中存在节点并key值存在，但内容为空时返回的内容】
范例：
<文件读取 名字="范例" 路径="D:\\001.ini" 键名="节点" 值名="某值" 内容="默认文本">


<文件写入>
路径=D:\\001.ini【声明ini文件的路径】
键名=键；【声明所要写入的ini文件的节点】
值名=值；【声明所要写入的ini文件的节点下面的key值的名字】
内容=需要写入的内容；【具体要写入的内容，不支持多行模式】
范例：
<文件写入 路径="D:\\001.ini" 键名="节点" 值名="某值" 内容="需要写入的内容">


<设置变量>
名字=变量【声明一个变量名以供脚本使用，变量名支持引用和四则混合运算】
内容=具体需要声明的内容【支持变量引用和四则混合运算，不区分类型】
分隔符=%【声明一个用来分隔数组的分隔符，将自动设置为数组】
范例：
<设置变量 名字="变量" 内容="默认值">


<数组排序>
名字=变量【声明一个数组，会对数组重新重新排序】


<新建画布>
【这个是绘制命令的前提条件，必须要先声明并新建画布才能使用绘制命令】
宽度=100【设置画布的宽度为100，默认“100”】
高度=100【设置画布的高度为100，默认“100”】
范例：
<新建画布 高度="100" 宽度="100">


<清空画布>
【这个是单标签命令，没有参数。画布上所有的内容会被清除，变成透明色】
范例：
<清空画布>


<绘制方形>、<绘制圆形>、<绘制饼形>
<绘制弧线>【这方法有效参数只有“位置”、“大小”、“角度”、“颜色”】
位置=10,10【设置初始位置，根据绘制模式判断，目前是从左上角开始绘制，默认“0,0”】
大小=10,10【设置大小，参数的值是指“宽度”和“高度”，默认“10,10”】
角度=0,30【绘制饼形才有用的参数，从指定角度开始沿顺时针扫过的度数】
颜色=#FFFFFF【设置边框颜色，允许使用名字注定颜色，比如“red”推荐使用html代码，默认黑色】
填充色=cyan【设置填充的颜色，需要配合“填充”参数使用，否则默认不填充，默认是黑色】
填充=10,10【绘制一个指定宽度和高度的实心图形，颜色由填充色声明】
填充方式=中心【中心、左上、左下、右上、右下，相当于设定填充原点】
渐变色=#00FF00【设置第二种填充色、将会采取渐变的方式绘制】
渐变方式=水平【水平、垂直、斜向、反斜向】
渐变起点=0,0【渐变的起点】
渐变区域=10,10【渐变的区域】
范例：
<绘制方形 位置="10,10" 大小="10,10" 颜色="#FFFFFF" 填充色="cyan" 填充="10,10">
<绘制圆形 位置="10,10" 大小="10,10" 颜色="#FFFFFF" 填充色="cyan" 填充="10,10">
<绘制饼形 位置="10,10" 大小="10,10" 颜色="#FFFFFF" 填充色="cyan" 填充="10,10">
<绘制弧线 位置="10,10" 大小="10,10" 颜色="#FFFFFF">



<绘制直线>
<绘制曲线>
位置=0,0,10,10【声明两个点，连接这两个之间的路径】
扭曲=0,0,10,10【声明两个点，作为贝塞尔曲线的控制点】
颜色=red【声明该线条的颜色】
范例：
<绘制直线 位置="0,0,10,10" 颜色="#FFFFFF">
<绘制曲线 位置="0,0,10,10" 颜色="#FFFFFF" 扭曲="0,0,10,10">


<绘制文本>
内容=hello\sworld！【空格请用\s进行转义，不支持换行】
字体=宋体【这个老实说我还没弄清楚该怎么玩，默认黑体，自己安装字体有可能出错，原因是名字不一样】
字号=10【字号必须要在字体后面声明，否则字体效果将无效，默认10号字体】
位置=0,0【声明文本所在位置】
颜色=black【声明文本的颜色，不使用背景色】
范例：
<绘制文本 位置="10,10" 字体="宋体" 字号="10" 大小="10,10" 颜色="#FFFFFF">


<绘制图片>
位置=0,0【声明图片所在位置，支持四则混合运算和变量引用】
路径=D:\\1.jpg【声明图片所在路径】
旋转=90【声明旋转的角度，顺时针，正方向不会有位移，矩形图片大小会改变造成图片位移】
范例：
<绘制图片 位置="0,0" 路径="D:\\1.jpg" 旋转="90">


<图片另存>
路径=D:\\2.png【透明色推荐使用“*.png”方式保存，gif保存方式在透明色上处理有所不一样】
范例：
<图片另存 路径="D:\\1.png">
